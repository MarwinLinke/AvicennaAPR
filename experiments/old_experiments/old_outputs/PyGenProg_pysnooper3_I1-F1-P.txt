APPROACH: PyGenProg
SUBJECT: pysnooper_3
The repair ran for 2.2084 seconds.
The repair ran for 127.7288 seconds.
The evaluation took 33.8230 seconds.
Was a valid patch found: True
BEST FITNESS: 1
Found a total of 2 patches.

PATCHES:
GeneticCandidate@tmp/pysnooper_3(1)[1.00]
---------- Evaluation Matrix ----------
STILL PASSING: [0/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [0/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.0
---------------------------------------
--- pysnooper/tracer.py
+++ pysnooper/tracer.py
@@ -1,12 +1,8 @@
-# Copyright 2019 Ram Rachum.
-# This program is distributed under the MIT license.
-
 import types
 import sys
 import re
 import collections
 import datetime as datetime_module
-
 import six
 
 def get_shortish_repr(item):
@@ -32,15 +28,11 @@
                 current = getattr(current, step)
         except (KeyError, AttributeError):
             continue
-        try:
-            result[variable] = get_shortish_repr(current)
-        except Exception:
-            continue
+        import os
     return result
-
-
 source_cache_by_module_name = {}
 source_cache_by_file_name = {}
+
 def get_source_from_frame(frame):
     module_name = frame.f_globals.get('__name__') or ''
     if module_name:
@@ -56,7 +48,6 @@
             pass
     function = frame.f_code.co_name
     loader = frame.f_globals.get('__loader__')
-
     source = None
     if hasattr(loader, 'get_source'):
         try:
@@ -73,22 +64,14 @@
             pass
     if source is None:
         raise NotImplementedError
-
-    # If we just read the source from a file, or if the loader did not
-    # apply tokenize.detect_encoding to decode the source into a
-    # string, then we should do that ourselves.
     if isinstance(source[0], bytes):
         encoding = 'ascii'
         for line in source[:2]:
-            # File coding may be specified. Match pattern from PEP-263
-            # (https://www.python.org/dev/peps/pep-0263/)
-            match = re.search(br'coding[:=]\s*([-\w.]+)', line)
+            match = re.search(b'coding[:=]\\s*([-\\w.]+)', line)
             if match:
                 encoding = match.group(1).decode('ascii')
                 break
-        source = [six.text_type(sline, encoding, 'replace') for sline in
-                  source]
-
+        source = [six.text_type(sline, encoding, 'replace') for sline in source]
     if module_name:
         source_cache_by_module_name[module_name] = source
     if file_name:
@@ -96,8 +79,8 @@
     return source
 
 class Tracer:
-    def __init__(self, target_code_object, write, variables=(), depth=1,
-                 prefix=''):
+
+    def __init__(self, target_code_object, write, variables=(), depth=1, prefix=''):
         self.target_code_object = target_code_object
         self._write = write
         self.variables = variables
@@ -109,7 +92,7 @@
 
     def write(self, s):
         s = '{self.prefix}{s}\n'.format(**locals())
-        if isinstance(s, bytes): # Python 2 compatibility
+        if isinstance(s, bytes):
             s = s.decode()
         self._write(s)
 
@@ -120,20 +103,9 @@
     def __exit__(self, exc_type, exc_value, exc_traceback):
         sys.settrace(self.original_trace_function)
 
-
     def trace(self, frame, event, arg):
-
-        ### Checking whether we should trace this line: #######################
-        #                                                                     #
-        # We should trace this line either if it's in the decorated function,
-        # or the user asked to go a few levels deeper and we're within that
-        # number of levels deeper.
-
         if frame.f_code is not self.target_code_object:
             if self.depth == 1:
-                # We did the most common and quickest check above, because the
-                # trace function runs so incredibly often, therefore it's
-                # crucial to hyper-optimize it for the common case.
                 return self.trace
             else:
                 _frame_candidate = frame
@@ -148,40 +120,21 @@
                     return self.trace
         else:
             indent = ''
-        #                                                                     #
-        ### Finished checking whether we should trace this line. ##############
-
-        ### Reporting newish and modified variables: ##########################
-        #                                                                     #
-        self.frame_to_old_local_reprs[frame] = old_local_reprs = \
-                                               self.frame_to_local_reprs[frame]
-        self.frame_to_local_reprs[frame] = local_reprs = \
-                               get_local_reprs(frame, variables=self.variables)
-
+        self.frame_to_old_local_reprs[frame] = old_local_reprs = self.frame_to_local_reprs[frame]
+        self.frame_to_local_reprs[frame] = local_reprs = get_local_reprs(frame, variables=self.variables)
         modified_local_reprs = {}
         newish_local_reprs = {}
-
         for key, value in local_reprs.items():
             if key not in old_local_reprs:
                 newish_local_reprs[key] = value
             elif old_local_reprs[key] != value:
                 modified_local_reprs[key] = value
-
-        newish_string = ('Starting var:.. ' if event == 'call' else
-                                                            'New var:....... ')
+        newish_string = 'Starting var:.. ' if event == 'call' else 'New var:....... '
         for name, value_repr in newish_local_reprs.items():
-            self.write('{indent}{newish_string}{name} = {value_repr}'.format(
-                                                                   **locals()))
+            self.write('{indent}{newish_string}{name} = {value_repr}'.format(**locals()))
         for name, value_repr in modified_local_reprs.items():
-            self.write('{indent}Modified var:.. {name} = {value_repr}'.format(
-                                                                   **locals()))
-        #                                                                     #
-        ### Finished newish and modified variables. ###########################
-
+            self.write('{indent}Modified var:.. {name} = {value_repr}'.format(**locals()))
         now_string = datetime_module.datetime.now().time().isoformat()
         source_line = get_source_from_frame(frame)[frame.f_lineno - 1]
-        self.write('{indent}{now_string} {event:9} '
-                   '{frame.f_lineno:4} {source_line}'.format(**locals()))
-        return self.trace
-
-
+        self.write('{indent}{now_string} {event:9} {frame.f_lineno:4} {source_line}'.format(**locals()))
+        return self.trace

GeneticCandidate@tmp/pysnooper_3(1)[1.00]
---------- Evaluation Matrix ----------
STILL PASSING: [0/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [0/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.0
---------------------------------------
--- pysnooper/tracer.py
+++ pysnooper/tracer.py
@@ -1,12 +1,8 @@
-# Copyright 2019 Ram Rachum.
-# This program is distributed under the MIT license.
-
 import types
 import sys
 import re
 import collections
 import datetime as datetime_module
-
 import six
 
 def get_shortish_repr(item):
@@ -28,6 +24,8 @@
         step_iterator = iter(steps)
         try:
             current = locals_and_globals[next(step_iterator)]
+            if file_name:
+                source_cache_by_file_name[file_name] = source
             for step in step_iterator:
                 current = getattr(current, step)
         except (KeyError, AttributeError):
@@ -37,10 +35,9 @@
         except Exception:
             continue
     return result
-
-
 source_cache_by_module_name = {}
 source_cache_by_file_name = {}
+
 def get_source_from_frame(frame):
     module_name = frame.f_globals.get('__name__') or ''
     if module_name:
@@ -56,7 +53,6 @@
             pass
     function = frame.f_code.co_name
     loader = frame.f_globals.get('__loader__')
-
     source = None
     if hasattr(loader, 'get_source'):
         try:
@@ -73,22 +69,14 @@
             pass
     if source is None:
         raise NotImplementedError
-
-    # If we just read the source from a file, or if the loader did not
-    # apply tokenize.detect_encoding to decode the source into a
-    # string, then we should do that ourselves.
     if isinstance(source[0], bytes):
         encoding = 'ascii'
         for line in source[:2]:
-            # File coding may be specified. Match pattern from PEP-263
-            # (https://www.python.org/dev/peps/pep-0263/)
-            match = re.search(br'coding[:=]\s*([-\w.]+)', line)
+            match = re.search(b'coding[:=]\\s*([-\\w.]+)', line)
             if match:
                 encoding = match.group(1).decode('ascii')
                 break
-        source = [six.text_type(sline, encoding, 'replace') for sline in
-                  source]
-
+        source = [six.text_type(sline, encoding, 'replace') for sline in source]
     if module_name:
         source_cache_by_module_name[module_name] = source
     if file_name:
@@ -96,8 +84,8 @@
     return source
 
 class Tracer:
-    def __init__(self, target_code_object, write, variables=(), depth=1,
-                 prefix=''):
+
+    def __init__(self, target_code_object, write, variables=(), depth=1, prefix=''):
         self.target_code_object = target_code_object
         self._write = write
         self.variables = variables
@@ -109,7 +97,7 @@
 
     def write(self, s):
         s = '{self.prefix}{s}\n'.format(**locals())
-        if isinstance(s, bytes): # Python 2 compatibility
+        if isinstance(s, bytes):
             s = s.decode()
         self._write(s)
 
@@ -120,20 +108,9 @@
     def __exit__(self, exc_type, exc_value, exc_traceback):
         sys.settrace(self.original_trace_function)
 
-
     def trace(self, frame, event, arg):
-
-        ### Checking whether we should trace this line: #######################
-        #                                                                     #
-        # We should trace this line either if it's in the decorated function,
-        # or the user asked to go a few levels deeper and we're within that
-        # number of levels deeper.
-
         if frame.f_code is not self.target_code_object:
             if self.depth == 1:
-                # We did the most common and quickest check above, because the
-                # trace function runs so incredibly often, therefore it's
-                # crucial to hyper-optimize it for the common case.
                 return self.trace
             else:
                 _frame_candidate = frame
@@ -148,40 +125,21 @@
                     return self.trace
         else:
             indent = ''
-        #                                                                     #
-        ### Finished checking whether we should trace this line. ##############
-
-        ### Reporting newish and modified variables: ##########################
-        #                                                                     #
-        self.frame_to_old_local_reprs[frame] = old_local_reprs = \
-                                               self.frame_to_local_reprs[frame]
-        self.frame_to_local_reprs[frame] = local_reprs = \
-                               get_local_reprs(frame, variables=self.variables)
-
+        self.frame_to_old_local_reprs[frame] = old_local_reprs = self.frame_to_local_reprs[frame]
+        self.frame_to_local_reprs[frame] = local_reprs = get_local_reprs(frame, variables=self.variables)
         modified_local_reprs = {}
         newish_local_reprs = {}
-
         for key, value in local_reprs.items():
             if key not in old_local_reprs:
                 newish_local_reprs[key] = value
             elif old_local_reprs[key] != value:
                 modified_local_reprs[key] = value
-
-        newish_string = ('Starting var:.. ' if event == 'call' else
-                                                            'New var:....... ')
+        newish_string = 'Starting var:.. ' if event == 'call' else 'New var:....... '
         for name, value_repr in newish_local_reprs.items():
-            self.write('{indent}{newish_string}{name} = {value_repr}'.format(
-                                                                   **locals()))
+            self.write('{indent}{newish_string}{name} = {value_repr}'.format(**locals()))
         for name, value_repr in modified_local_reprs.items():
-            self.write('{indent}Modified var:.. {name} = {value_repr}'.format(
-                                                                   **locals()))
-        #                                                                     #
-        ### Finished newish and modified variables. ###########################
-
+            self.write('{indent}Modified var:.. {name} = {value_repr}'.format(**locals()))
         now_string = datetime_module.datetime.now().time().isoformat()
         source_line = get_source_from_frame(frame)[frame.f_lineno - 1]
-        self.write('{indent}{now_string} {event:9} '
-                   '{frame.f_lineno:4} {source_line}'.format(**locals()))
-        return self.trace
-
-
+        self.write('{indent}{now_string} {event:9} {frame.f_lineno:4} {source_line}'.format(**locals()))
+        return self.trace

