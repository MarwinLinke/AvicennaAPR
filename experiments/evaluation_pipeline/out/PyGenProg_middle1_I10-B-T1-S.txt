APPROACH: PyGenProg
SUBJECT: middle_1
Used 1 failing and 1 passing test cases from Tests4py in the fault localization
Used 1 failing and 1 passing test cases from Tests4py in the validation
In total 2 for fault localization and 2 for validation.
The gathering of test cases took 0.6463 seconds.
The repair ran for 165.4334 seconds.
The evaluation took 18.6085 seconds.
Was a valid patch found: False
BEST FITNESS: 0.09090909090909091
BEST F1 SCORE: 0.0
Found a total of 1 patches.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

PATCHES (SORTED):
GeneticCandidate@tmp/middle_1(4)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,17 +1,12 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
         sys.stdout = stdout
-    if stderr is not None:
-        sys.stderr = stderr
+    pass
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

