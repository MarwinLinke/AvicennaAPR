APPROACH: PyGenProg
SUBJECT: middle_1
The repair ran for 0.6673 seconds.
The repair ran for 101.1805 seconds.
The evaluation took 64.3152 seconds.
Was a valid patch found: False
BEST FITNESS: 0.0
Found a total of 8 patches.

PATCHES:
GeneticCandidate@tmp/middle_1(1)[0.00]
---------- Confusion Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
--------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,17 +1,12 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
         sys.stdout = stdout
-    if stderr is not None:
-        sys.stderr = stderr
+    sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

GeneticCandidate@tmp/middle_1(2)[0.00]
---------- Confusion Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
--------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,17 +1,12 @@
 import sys
-
 import middle
 
-
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
-    if stdout is not None:
-        sys.stdout = stdout
+    pass
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

GeneticCandidate@tmp/middle_1(1)[0.00]
---------- Confusion Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
--------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,17 +1,14 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
         sys.stdout = stdout
     if stderr is not None:
         sys.stderr = stderr
+        sys.stdout = stdout
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

GeneticCandidate@tmp/middle_1(1)[0.00]
---------- Confusion Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
--------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -1,13 +1,25 @@
 def middle(x, y, z):
     m = z
+
+    def middle(x, y, z):
+        m = z
+        if y < z:
+            if x < y:
+                m = y
+            elif x < z:
+                m = y
+        elif x > y:
+            m = y
+        elif x > z:
+            m = x
+        return m
     if y < z:
         if x < y:
             m = y
         elif x < z:
             m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+    return m

GeneticCandidate@tmp/middle_1(1)[0.00]
---------- Confusion Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
--------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,17 +1,13 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
-        sys.stdout = stdout
+        pass
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

GeneticCandidate@tmp/middle_1(1)[0.00]
---------- Confusion Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
--------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,7 +1,5 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
@@ -9,9 +7,7 @@
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    pass
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

GeneticCandidate@tmp/middle_1(2)[0.00]
---------- Confusion Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
--------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -4,10 +4,11 @@
         if x < y:
             m = y
         elif x < z:
+            if __name__ == '__main__':
+                main()
             m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+    return m

GeneticCandidate@tmp/middle_1(0)[0.00]
---------- Confusion Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
--------------------------------------
Patch couldn't be printed.