APPROACH: PyGenProg
SUBJECT: middle_1
Used 1 failing and 10 passing test cases from Tests4py in the fault localization
Used 10 failing and 10 passing test cases from Avicenna in the validation
In total 11 for fault localization and 20 for validation.
The gathering of test cases took 2.4599 seconds.
The repair ran for 487.7288 seconds.
The evaluation took 366.8615 seconds.
Was a valid patch found: False
BEST FITNESS: 0.09090909090909091
BEST F1 SCORE: 0.0
Found a total of 23 patches.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

PATCHES (SORTED):
GeneticCandidate@tmp/middle_1(1)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,7 +1,5 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
@@ -9,9 +7,16 @@
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
+
+    def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
+        if stdout is not None:
+            sys.stdout = stdout
+        if stderr is not None:
+            sys.stderr = stderr
+        args = args or sys.argv[1:]
+        assert len(args) == 3, 'wrong number of arguments'
+        print(middle.middle(*list(map(int, args))))
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -5,9 +5,18 @@
             m = y
         elif x < z:
             m = y
+    elif x > y:
+        m = y
     else:
-        if x > y:
+        if y < z:
+            if x < y:
+                m = y
+            elif x < z:
+                m = y
+        elif x > y:
             m = y
         elif x > z:
             m = x
-    return m
+        if x > z:
+            m = x
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,17 +1,13 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
         sys.stdout = stdout
     if stderr is not None:
-        sys.stderr = stderr
+        pass
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,7 +1,5 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
@@ -9,9 +7,8 @@
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    m = z
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,7 +1,5 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
@@ -9,9 +7,8 @@
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    if x > z:
+        m = x

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -5,9 +5,15 @@
             m = y
         elif x < z:
             m = y
-    else:
-        if x > y:
+    elif x > y:
+        m = y
+    elif y < z:
+        if x < y:
             m = y
-        elif x > z:
-            m = x
-    return m
+        elif x < z:
+            m = y
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(0)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
Patch could not be printed.

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,17 +1,12 @@
 import sys
-
 import middle
 
-
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
-    if stdout is not None:
-        sys.stdout = stdout
+    pass
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,17 +1,12 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
         sys.stdout = stdout
-    if stderr is not None:
-        sys.stderr = stderr
+    pass
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [49/50]
NOW FAILING: [1/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.49
F1 SCORE: 0.0
---------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -3,11 +3,10 @@
     if y < z:
         if x < y:
             m = y
-        elif x < z:
-            m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+        else:
+            pass
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.07]
---------- Evaluation Matrix ----------
STILL PASSING: [40/50]
NOW FAILING: [10/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.4
F1 SCORE: 0.0
---------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -5,9 +5,9 @@
             m = y
         elif x < z:
             m = y
-    else:
-        if x > y:
+    elif x > y:
+        m = y
+    elif x > z:
+        if x < z:
             m = y
-        elif x > z:
-            m = x
-    return m
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.07]
---------- Evaluation Matrix ----------
STILL PASSING: [40/50]
NOW FAILING: [10/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.4
F1 SCORE: 0.0
---------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -5,9 +5,8 @@
             m = y
         elif x < z:
             m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+    elif x > y:
+        m = y
+    elif x > z:
+        pass
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.06]
---------- Evaluation Matrix ----------
STILL PASSING: [31/50]
NOW FAILING: [19/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.31
F1 SCORE: 0.0
---------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -1,13 +1,10 @@
 def middle(x, y, z):
     m = z
     if y < z:
-        if x < y:
-            m = y
-        elif x < z:
-            m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
+        if x > z:
             m = x
-    return m
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.04]
---------- Evaluation Matrix ----------
STILL PASSING: [24/50]
NOW FAILING: [26/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.24
F1 SCORE: 0.0
---------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -1,13 +1,4 @@
 def middle(x, y, z):
     m = z
-    if y < z:
-        if x < y:
-            m = y
-        elif x < z:
-            m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+    m = z
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.04]
---------- Evaluation Matrix ----------
STILL PASSING: [24/50]
NOW FAILING: [26/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.24
F1 SCORE: 0.0
---------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -1,13 +1,4 @@
 def middle(x, y, z):
     m = z
-    if y < z:
-        if x < y:
-            m = y
-        elif x < z:
-            m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+    pass
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,7 +1,5 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
@@ -9,9 +7,8 @@
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
+    m = z
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -1,13 +1,4 @@
 def middle(x, y, z):
     m = z
-    if y < z:
-        if x < y:
-            m = y
-        elif x < z:
-            m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+    sys.stderr = stderr
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,17 +1,13 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
-        sys.stdout = stdout
+        main()
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,17 +1,16 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
         sys.stdout = stdout
     if stderr is not None:
-        sys.stderr = stderr
+        if x < y:
+            m = y
+        elif x < z:
+            m = y
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,17 +1,13 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
         sys.stdout = stdout
     if stderr is not None:
         sys.stderr = stderr
-    args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    pass
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -5,9 +5,8 @@
             m = y
         elif x < z:
             m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+    pass

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,17 +1,14 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
         sys.stdout = stdout
     if stderr is not None:
         sys.stderr = stderr
+        m = y
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,17 +1,16 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
-        sys.stdout = stdout
+        if x < y:
+            m = y
+        elif x < z:
+            m = y
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

