APPROACH: PyGenProg
SUBJECT: middle_1
Used 1 failing and 10 passing test cases from Tests4py in the fault localization
Used 50 failing and 50 passing test cases from Avicenna in the validation
In total 11 for fault localization and 100 for validation.
The gathering of test cases took 4.4522 seconds.
The repair ran for 384.7077 seconds.
The evaluation took 319.8211 seconds.
Was a valid patch found: False
BEST FITNESS: 0.09090909090909091
BEST F1 SCORE: 0.0
Found a total of 23 patches.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

PATCHES (SORTED):
GeneticCandidate@tmp/middle_1(2)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,7 +1,5 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
@@ -9,9 +7,6 @@
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+pass

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,7 +1,5 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
@@ -9,9 +7,16 @@
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+    if y < z:
+        if x < y:
+            m = y
+        elif x < z:
+            m = y
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,7 +1,5 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
@@ -9,9 +7,8 @@
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,7 +1,5 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
@@ -9,9 +7,7 @@
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    pass
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -3,11 +3,11 @@
     if y < z:
         if x < y:
             m = y
+            import middle
         elif x < z:
             m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,17 +1,13 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
-        sys.stdout = stdout
+        pass
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,17 +1,12 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
         sys.stdout = stdout
-    if stderr is not None:
-        sys.stderr = stderr
+    pass
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -5,9 +5,9 @@
             m = y
         elif x < z:
             m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+            return m
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,7 +1,5 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
@@ -9,9 +7,7 @@
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(0)[0.09]
---------- Evaluation Matrix ----------
STILL PASSING: [50/50]
NOW FAILING: [0/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.5
F1 SCORE: 0.0
---------------------------------------
Patch could not be printed.

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.08]
---------- Evaluation Matrix ----------
STILL PASSING: [46/50]
NOW FAILING: [4/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.46
F1 SCORE: 0.0
---------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -3,11 +3,10 @@
     if y < z:
         if x < y:
             m = y
-        elif x < z:
-            m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+        else:
+            pass
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.08]
---------- Evaluation Matrix ----------
STILL PASSING: [43/50]
NOW FAILING: [7/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.43
F1 SCORE: 0.0
---------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -10,4 +10,6 @@
             m = y
         elif x > z:
             m = x
-    return m
+        if x < z:
+            m = y
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.07]
---------- Evaluation Matrix ----------
STILL PASSING: [41/50]
NOW FAILING: [9/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.41
F1 SCORE: 0.0
---------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -1,13 +1,16 @@
 def middle(x, y, z):
     m = z
+    if x < y:
+        m = y
+    elif x < z:
+        m = y
     if y < z:
         if x < y:
             m = y
         elif x < z:
             m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.07]
---------- Evaluation Matrix ----------
STILL PASSING: [39/50]
NOW FAILING: [11/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.39
F1 SCORE: 0.0
---------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -2,12 +2,11 @@
     m = z
     if y < z:
         if x < y:
-            m = y
+            pass
         elif x < z:
             m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.07]
---------- Evaluation Matrix ----------
STILL PASSING: [37/50]
NOW FAILING: [13/50]
NOW PASSING: [0/50]
STILL FAILING: [50/50]
PRECISION: 0.0
RECALL: 0.0
ACCURACY: 0.37
F1 SCORE: 0.0
---------------------------------------
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -5,9 +5,8 @@
             m = y
         elif x < z:
             m = y
+    elif x > y:
+        m = y
     else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+        pass
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -5,9 +5,17 @@
             m = y
         elif x < z:
             m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+
+    def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
+        if stdout is not None:
+            sys.stdout = stdout
+        if stderr is not None:
+            sys.stderr = stderr
+        args = args or sys.argv[1:]
+        assert len(args) == 3, 'wrong number of arguments'
+        print(middle.middle(*list(map(int, args))))
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -1,13 +1,12 @@
 def middle(x, y, z):
-    m = z
+    return m
     if y < z:
         if x < y:
             m = y
         elif x < z:
             m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,7 +1,5 @@
-import sys
-
+m = z
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
@@ -9,9 +7,7 @@
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -1,13 +1,12 @@
 def middle(x, y, z):
-    m = z
+    main()
     if y < z:
         if x < y:
             m = y
         elif x < z:
             m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(1)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,7 +1,16 @@
-import sys
-
+def middle(x, y, z):
+    m = z
+    if y < z:
+        if x < y:
+            m = y
+        elif x < z:
+            m = y
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+    return m
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
@@ -9,9 +18,7 @@
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -6,8 +6,10 @@
         elif x < z:
             m = y
     else:
+        if stdout is not None:
+            sys.stdout = stdout
         if x > y:
             m = y
         elif x > z:
             m = x
-    return m
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/__init__.py
+++ src/middle/__init__.py
@@ -4,10 +4,10 @@
         if x < y:
             m = y
         elif x < z:
+            assert len(args) == 3, 'wrong number of arguments'
             m = y
-    else:
-        if x > y:
-            m = y
-        elif x > z:
-            m = x
-    return m
+    elif x > y:
+        m = y
+    elif x > z:
+        m = x
+    return m

____________________________________________________________________________________________________

GeneticCandidate@tmp/middle_1(2)[0.00]
No tests4py report was found, matrix could not be calculated.
--- src/middle/cli.py
+++ src/middle/cli.py
@@ -1,7 +1,5 @@
 import sys
-
 import middle
-
 
 def main(*args: str, stdout=sys.stdout, stderr=sys.stderr):
     if stdout is not None:
@@ -9,9 +7,8 @@
     if stderr is not None:
         sys.stderr = stderr
     args = args or sys.argv[1:]
-    assert len(args) == 3, "wrong number of arguments"
+    assert len(args) == 3, 'wrong number of arguments'
+    m = y
     print(middle.middle(*list(map(int, args))))
-
-
-if __name__ == "__main__":
-    main()
+if __name__ == '__main__':
+    main()

____________________________________________________________________________________________________

